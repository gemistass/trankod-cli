import ts, { ListFormat, NodeArray, factory } from 'typescript';

import { printNode, printNodeArray } from '../utils/printer';

const PATH = 'generatedFiles';
export function generateMainInvocationLambda(name: string) {
    const root = [
        factory.createImportDeclaration(
          undefined,
          factory.createImportClause(
            false,
            undefined,
            factory.createNamedImports([
              factory.createImportSpecifier(
                false,
                undefined,
                factory.createIdentifier("InvocationEventAdapter")
              ),
              factory.createImportSpecifier(
                false,
                undefined,
                factory.createIdentifier("middyfy")
              )
            ])
          ),
          factory.createStringLiteral("@common/adapter"),
          undefined
        ),
        factory.createImportDeclaration(
          undefined,
          factory.createImportClause(
            false,
            undefined,
            factory.createNamedImports([factory.createImportSpecifier(
              false,
              undefined,
              factory.createIdentifier("AWSLambda")
            )])
          ),
          factory.createStringLiteral("@common/infra/aws-lambda"),
          undefined
        ),
        factory.createImportDeclaration(
          undefined,
          factory.createImportClause(
            false,
            undefined,
            factory.createNamedImports([factory.createImportSpecifier(
              false,
              undefined,
              factory.createIdentifier("HttpResponse")
            )])
          ),
          factory.createStringLiteral("@common/presentation/protocols"),
          undefined
        ),
        factory.createImportDeclaration(
          undefined,
          factory.createImportClause(
            false,
            undefined,
            factory.createNamedImports([factory.createImportSpecifier(
              false,
              undefined,
              factory.createIdentifier("makeUsecaseController")
            )])
          ),
          factory.createStringLiteral("@/main/factories/controllers"),
          undefined
        ),
        factory.createVariableStatement(
          undefined,
          factory.createVariableDeclarationList(
            [factory.createVariableDeclaration(
              factory.createIdentifier("usecaseInvocationLambda"),
              undefined,
              undefined,
              factory.createNewExpression(
                factory.createIdentifier("AWSLambda"),
                [
                  factory.createKeywordTypeNode(ts.SyntaxKind.UnknownKeyword),
                  factory.createTypeReferenceNode(
                    factory.createIdentifier("HttpResponse"),
                    undefined
                  )
                ],
                [
                  factory.createCallExpression(
                    factory.createIdentifier("makeUsecaseController"),
                    undefined,
                    []
                  ),
                  factory.createNewExpression(
                    factory.createIdentifier("InvocationEventAdapter"),
                    undefined,
                    []
                  )
                ]
              )
            )],
            ts.NodeFlags.Const 
          )
        ),
        factory.createVariableStatement(
          [factory.createToken(ts.SyntaxKind.ExportKeyword)],
          factory.createVariableDeclarationList(
            [factory.createVariableDeclaration(
              factory.createIdentifier("handle"),
              undefined,
              undefined,
              factory.createCallExpression(
                factory.createIdentifier("middyfy"),
                undefined,
                [factory.createCallExpression(
                  factory.createPropertyAccessExpression(
                    factory.createPropertyAccessExpression(
                      factory.createIdentifier("usecaseInvocationLambda"),
                      factory.createIdentifier("handle")
                    ),
                    factory.createIdentifier("bind")
                  ),
                  undefined,
                  [factory.createIdentifier("usecaseInvocationLambda")]
                )]
              )
            )],
            ts.NodeFlags.Const
          )
        )
      ];
      ;

    return printNodeArray(root, name + 'InvocationLambda' + '', PATH);
}
