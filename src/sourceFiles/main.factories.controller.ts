import ts, { ListFormat, NodeArray, factory } from 'typescript';
import { printNode, printNodeArray } from '../utils/printer';

const PATH = 'generatedFiles';
export function generateMainControllerFactory(name: string) {
    const root = [
        factory.createImportDeclaration(
          undefined,
          factory.createImportClause(
            false,
            undefined,
            factory.createNamedImports([
              factory.createImportSpecifier(
                false,
                undefined,
                factory.createIdentifier("Controller")
              ),
              factory.createImportSpecifier(
                false,
                undefined,
                factory.createIdentifier("HttpResponse")
              )
            ])
          ),
          factory.createStringLiteral("@common/presentation/protocols"),
          undefined
        ),
        factory.createImportDeclaration(
          undefined,
          factory.createImportClause(
            false,
            undefined,
            factory.createNamedImports([factory.createImportSpecifier(
              false,
              undefined,
              factory.createIdentifier("makeUsecaseImpl")
            )])
          ),
          factory.createStringLiteral("@/main/factories/usecases"),
          undefined
        ),
        factory.createImportDeclaration(
          undefined,
          factory.createImportClause(
            false,
            undefined,
            factory.createNamedImports([
              factory.createImportSpecifier(
                false,
                undefined,
                factory.createIdentifier("UsecaseController")
              ),
              factory.createImportSpecifier(
                false,
                undefined,
                factory.createIdentifier("UsecaseControllerRequest")
              )
            ])
          ),
          factory.createStringLiteral("@/presentation/controllers"),
          undefined
        ),
        factory.createImportDeclaration(
          undefined,
          factory.createImportClause(
            false,
            undefined,
            factory.createNamedImports([factory.createImportSpecifier(
              false,
              undefined,
              factory.createIdentifier("makeUsecaseValidator")
            )])
          ),
          factory.createStringLiteral("./usecaseValidatorFactory"),
          undefined
        ),
        factory.createVariableStatement(
          [factory.createToken(ts.SyntaxKind.ExportKeyword)],
          factory.createVariableDeclarationList(
            [factory.createVariableDeclaration(
              factory.createIdentifier("makeUsecaseController"),
              undefined,
              undefined,
              factory.createArrowFunction(
                undefined,
                undefined,
                [],
                factory.createTypeReferenceNode(
                  factory.createIdentifier("Controller"),
                  [
                    factory.createTypeReferenceNode(
                      factory.createIdentifier("UsecaseControllerRequest"),
                      undefined
                    ),
                    factory.createTypeReferenceNode(
                      factory.createIdentifier("HttpResponse"),
                      undefined
                    )
                  ]
                ),
                factory.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
                factory.createBlock(
                  [factory.createReturnStatement(factory.createNewExpression(
                    factory.createIdentifier("UsecaseController"),
                    undefined,
                    [
                      factory.createCallExpression(
                        factory.createIdentifier("makeUsecaseValidator"),
                        undefined,
                        []
                      ),
                      factory.createCallExpression(
                        factory.createIdentifier("makeUsecaseImpl"),
                        undefined,
                        []
                      )
                    ]
                  ))],
                  true
                )
              )
            )],
            ts.NodeFlags.Const
          )
        )
      ];
      ;

    return printNodeArray(root, name + 'ControllerFactory', PATH);
}
