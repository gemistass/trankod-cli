import ts, { ListFormat, NodeArray, factory } from 'typescript';
import { printNode, printNodeArray } from '../utils/printer';

const PATH = 'generatedFiles';
export function generateMainValidatorFactory(name: string) {
    const root = [
        factory.createImportDeclaration(
            undefined,
            factory.createImportClause(
                false,
                undefined,
                factory.createNamedImports([
                    factory.createImportSpecifier(false, undefined, factory.createIdentifier('JoiHelper')),
                    factory.createImportSpecifier(false, undefined, factory.createIdentifier('JoiValidator')),
                ]),
            ),
            factory.createStringLiteral('@common/infra/validators'),
            undefined,
        ),
        factory.createImportDeclaration(
            undefined,
            factory.createImportClause(
                false,
                undefined,
                factory.createNamedImports([
                    factory.createImportSpecifier(false, undefined, factory.createIdentifier('Validation')),
                ]),
            ),
            factory.createStringLiteral('@common/validation/protocols'),
            undefined,
        ),
        factory.createImportDeclaration(
            undefined,
            factory.createImportClause(
                false,
                undefined,
                factory.createNamedImports([
                    factory.createImportSpecifier(false, undefined, factory.createIdentifier('SchemaValidator')),
                ]),
            ),
            factory.createStringLiteral('@common/validation/validators'),
            undefined,
        ),
        factory.createImportDeclaration(
            undefined,
            factory.createImportClause(
                false,
                undefined,
                factory.createNamedImports([
                    factory.createImportSpecifier(
                        false,
                        undefined,
                        factory.createIdentifier('UsecaseRequest'),
                    ),
                ]),
            ),
            factory.createStringLiteral('@/presentation/controllers/usecase'),
            undefined,
        ),
        factory.createVariableStatement(
            [factory.createToken(ts.SyntaxKind.ExportKeyword)],
            factory.createVariableDeclarationList(
                [
                    factory.createVariableDeclaration(
                        factory.createIdentifier('USECASE_SCHEMA'),
                        undefined,
                        undefined,
                        factory.createCallExpression(
                            factory.createPropertyAccessExpression(
                                factory.createIdentifier('JoiHelper'),
                                factory.createIdentifier('object'),
                            ),
                            [
                                factory.createTypeReferenceNode(
                                    factory.createIdentifier('UsecaseRequest'),
                                    undefined,
                                ),
                            ],
                            [
                                factory.createObjectLiteralExpression(
                                    [
                                        factory.createPropertyAssignment(
                                            factory.createIdentifier('property'),
                                            factory.createCallExpression(
                                                factory.createPropertyAccessExpression(
                                                    factory.createCallExpression(
                                                        factory.createPropertyAccessExpression(
                                                            factory.createIdentifier('JoiHelper'),
                                                            factory.createIdentifier('string'),
                                                        ),
                                                        undefined,
                                                        [],
                                                    ),
                                                    factory.createIdentifier('required'),
                                                ),
                                                undefined,
                                                [],
                                            ),
                                        ),
                                    ],
                                    true,
                                ),
                            ],
                        ),
                    ),
                ],
                ts.NodeFlags.Const,
            ),
        ),
        factory.createVariableStatement(
            [factory.createToken(ts.SyntaxKind.ExportKeyword)],
            factory.createVariableDeclarationList(
                [
                    factory.createVariableDeclaration(
                        factory.createIdentifier('makeUpdateHubGeolocationValidator'),
                        undefined,
                        undefined,
                        factory.createArrowFunction(
                            undefined,
                            undefined,
                            [],
                            factory.createTypeReferenceNode(factory.createIdentifier('Validation'), [
                                factory.createKeywordTypeNode(ts.SyntaxKind.UnknownKeyword),
                                factory.createTypeReferenceNode(
                                    factory.createIdentifier('UsecaseRequest'),
                                    undefined,
                                ),
                            ]),
                            factory.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
                            factory.createBlock(
                                [
                                    factory.createVariableStatement(
                                        undefined,
                                        factory.createVariableDeclarationList(
                                            [
                                                factory.createVariableDeclaration(
                                                    factory.createIdentifier('joiValidation'),
                                                    undefined,
                                                    undefined,
                                                    factory.createNewExpression(
                                                        factory.createIdentifier('JoiValidator'),
                                                        undefined,
                                                        [factory.createIdentifier('USECASE_SCHEMA')],
                                                    ),
                                                ),
                                            ],
                                            ts.NodeFlags.Const,
                                        ),
                                    ),
                                    factory.createReturnStatement(
                                        factory.createNewExpression(
                                            factory.createIdentifier('SchemaValidator'),
                                            undefined,
                                            [factory.createIdentifier('joiValidation')],
                                        ),
                                    ),
                                ],
                                true,
                            ),
                        ),
                    ),
                ],
                ts.NodeFlags.Const,
            ),
        ),
    ];

    return printNodeArray(root, name + 'ValidatorFactory', PATH);
}
